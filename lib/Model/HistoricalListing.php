<?php
/**
 * HistoricalListing
 *
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Model;

use \ArrayAccess;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * HistoricalListing Class Doc Comment
 *
 * @category Class
 * @description Represents a car history entry
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoricalListing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoricalListing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'price' => 'string',
        'msrp' => 'string',
        'miles' => 'string',
        'vdp_url' => 'string',
        'seller_name' => 'string',
        'scraped_at' => 'float',
        'last_seen_at_date' => 'string',
        'source' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'dealer_id' => 'float',
        'seller_type' => 'string',
        'inventory_type' => 'string',
        'is_searchable'  => 'string',
        'data_source' => 'string',
        'status_date' => 'string' 
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'price' => null,
        'msrp' => null,
        'miles' => null,
        'vdp_url' => null,
        'seller_name' => null,
        'scraped_at' => null,
        'last_seen_at_date' => null,
        'source' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'dealer_id' => null,
        'seller_type' => null,
        'inventory_type' => null,
        'is_searchable'  => null,
        'data_source' => null,
        'status_date' => null 
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'price' => 'price',
        'msrp' => 'msrp',
        'miles' => 'miles',
        'vdp_url' => 'vdp_url',
        'seller_name' => 'seller_name',
        'scraped_at' => 'scraped_at',
        'last_seen_at_date' => 'last_seen_at_date',
        'source' => 'source',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'dealer_id' => 'dealer_id',
        'seller_type' => 'seller_type',
        'inventory_type' => 'inventory_type',
        'is_searchable'  => 'is_searchable',
        'data_source' => 'data_source',
        'status_date' => 'status_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'price' => 'setPrice',
        'msrp' => 'setMsrp',
        'miles' => 'setMiles',
        'vdp_url' => 'setVdpUrl',
        'seller_name' => 'setSellerName',
        'scraped_at' => 'setScrapedAt',
        'last_seen_at_date' => 'setLastSeenAtDate',
        'source' => 'setSource',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'dealer_id' => 'setDealerId',
        'seller_type' => 'setSellerType',
        'inventory_type' => 'setInventoryType',
        'is_searchable'  => 'setIsSearchable',
        'data_source' => 'setDataSource',
        'status_date' => 'setStatusDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'price' => 'getPrice',
        'msrp' => 'getMsrp',
        'miles' => 'getMiles',
        'vdp_url' => 'getVdpUrl',
        'seller_name' => 'getSellerName',
        'scraped_at' => 'getScrapedAt',
        'last_seen_at_date' => 'getLastSeenAtDate',
        'source' => 'getSource',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'dealer_id' => 'getDealerId',
        'seller_type' => 'getSellerType',
        'inventory_type' => 'getInventoryType',
        'is_searchable'  => 'getIsSearchable',
        'data_source' => 'getDataSource',
        'status_date' => 'getStatusDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['msrp'] = isset($data['msrp']) ? $data['msrp'] : null;
        $this->container['miles'] = isset($data['miles']) ? $data['miles'] : null;
        $this->container['vdp_url'] = isset($data['vdp_url']) ? $data['vdp_url'] : null;
        $this->container['seller_name'] = isset($data['seller_name']) ? $data['seller_name'] : null;
        $this->container['scraped_at'] = isset($data['scraped_at']) ? $data['scraped_at'] : null;
        $this->container['last_seen_at_date'] = isset($data['last_seen_at_date']) ? $data['last_seen_at_date'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['dealer_id'] = isset($data['dealer_id']) ? $data['dealer_id'] : null;
        $this->container['seller_type'] = isset($data['seller_type']) ? $data['seller_type'] : null;
        $this->container['inventory_type'] = isset($data['inventory_type']) ? $data['inventory_type'] : null;
        $this->container['is_searchable'] = isset($data['is_searchable']) ? $data['is_searchable'] : null;
        $this->container['data_source'] = isset($data['data_source']) ? $data['data_source'] : null;
        $this->container['status_date'] = isset($data['status_date']) ? $data['status_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier representing a specific listing from the Marketcheck database
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Asking price for the car
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets msrp
     *
     * @return string
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     *
     * @param string $msrp MSRP for the car
     *
     * @return $this
     */
    public function setMsrp($msrp)
    {
        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets miles
     *
     * @return string
     */
    public function getMiles()
    {
        return $this->container['miles'];
    }

    /**
     * Sets miles
     *
     * @param string $miles Odometer reading / reported miles usage for the car
     *
     * @return $this
     */
    public function setMiles($miles)
    {
        $this->container['miles'] = $miles;

        return $this;
    }

    /**
     * Gets vdp_url
     *
     * @return string
     */
    public function getVdpUrl()
    {
        return $this->container['vdp_url'];
    }

    /**
     * Sets vdp_url
     *
     * @param string $vdp_url Vehicle Details Page url of the specific car
     *
     * @return $this
     */
    public function setVdpUrl($vdp_url)
    {
        $this->container['vdp_url'] = $vdp_url;

        return $this;
    }

    /**
     * Gets seller_name
     *
     * @return string
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     *
     * @param string $seller_name Seller name of the listing from the Marketcheck database
     *
     * @return $this
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }

    /**
     * Gets scraped_at
     *
     * @return float
     */
    public function getScrapedAt()
    {
        return $this->container['scraped_at'];
    }

    /**
     * Sets scraped_at
     *
     * @param float $scraped_at Listing scraped at timestamp
     *
     * @return $this
     */
    public function setScrapedAt($scraped_at)
    {
        $this->container['scraped_at'] = $scraped_at;

        return $this;
    }

    /**
     * Gets last_seen_at_date
     *
     * @return float
     */
    public function getLastSeenAtDate()
    {
        return $this->container['last_seen_at_date'];
    }

    /**
     * Sets last_seen_at_date
     *
     * @param float $last_seen_at Listing last seen at (most recent) timestamp
     *
     * @return $this
     */
    public function setLastSeenAtDate($last_seen_at_date)
    {
        $this->container['last_seen_at_date'] = $last_seen_at_date;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Source website for the listing
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City of the listing
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the listing
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip Zip of the listing
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    
     /**
     * Gets dealer_id
     *
     * @return string
     */
    public function getDealerId()
    {
        return $this->container['dealer_id'];
    }

    /**
     * Sets zip
     *
     * @param string $dealer_id  the listing
     *
     * @return $this
     */
    public function setDealerId($dealer_id)
    {
        $this->container['dealer_id'] = $dealer_id;

        return $this;
    }

     /**
     * Gets seller_type
     *
     * @return string
     */
    public function getSellerType()
    {
        return $this->container['seller_type'];
    }

    /**
     * Sets seller_type
     *
     * @param string $seller_type of the listing
     *
     * @return $this
     */
    public function setSellerType($seller_type)
    {
        $this->container['seller_type'] = $seller_type;

        return $this;
    }

     /**
     * Gets inventory_type
     *
     * @return string
     */
    public function getInventoryType()
    {
        return $this->container['inventory_type'];
    }

    /**
     * Sets inventory_type
     *
     * @param string $inventory_type of the listing
     *
     * @return $this
     */
    public function setInventoryType($inventory_type)
    {
        $this->container['inventory_type'] = $inventory_type;

        return $this;
    }

    /**
     * Gets is_searchable
     *
     * @return string
     */
    public function getIsSearchable()
    {
        return $this->container['is_searchable'];
    }

    /**
     * Sets is_searchable
     *
     * @param string $is_searchable of the listing
     *
     * @return $this
     */
    public function setIsSearchable($is_searchable)
    {
        $this->container['is_searchable'] = $is_searchable;

        return $this;
    }

    /**
     * Gets data_source
     *
     * @return string
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     *
     * @param string $data_source of the listing
     *
     * @return $this
     */
    public function setDataSource($data_source)
    {
        $this->container['data_source'] = $data_source;

        return $this;
    }

    /**
     * Gets status_date
     *
     * @return string
     */
    public function getStatusDate()
    {
        return $this->container['status_date'];
    }

    /**
     * Sets status_date
     *
     * @param string $status_date of the listing
     *
     * @return $this
     */
    public function setStatusDate($status_date)
    {
        $this->container['status_date'] = $status_date;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


