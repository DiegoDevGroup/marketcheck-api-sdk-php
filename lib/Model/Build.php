<?php
/**
 * Build
 *
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Model;

use \ArrayAccess;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @description Describes the Car specification
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Build implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'year' => 'string',
        'make' => 'string',
        'model' => 'string',
        'trim' => 'string',
        'body_type' => 'string',
        'body_subtype' => 'string',
        'vehicle_type' => 'string',
        'drivetrain' => 'string',
        'fuel_type' => 'string',
        'made_in' => 'string',
        'engine' => 'string',
        'engine_block' => 'string',
        'engine_size' => 'string',
        'engine_measure' => 'string',
        'engine_aspiration' => 'string',
        'transmission' => 'string',
        'doors' => 'float',
        'cylinders' => 'float',
        'steering_type' => 'string',
        'antibrake_sys' => 'string',
        'tank_size' => 'string',
        'overall_height' => 'string',
        'overall_length' => 'string',
        'overall_width' => 'string',
        'std_seating' => 'string',
        'highway_miles' => 'string',
        'city_miles' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'year' => null,
        'make' => null,
        'model' => null,
        'trim' => null,
        'body_type' => null,
        'body_subtype' => null,
        'vehicle_type' => null,
        'drivetrain' => null,
        'fuel_type' => null,
        'made_in' => null,
        'engine' => null,
        'engine_block' => null,
        'engine_size' => null,
        'engine_measure' => null,
        'engine_aspiration' => null,
        'transmission' => null,
        'doors' => null,
        'cylinders' => null,
        'steering_type' => null,
        'antibrake_sys' => null,
        'tank_size' => null,
        'overall_height' => null,
        'overall_length' => null,
        'overall_width' => null,
        'std_seating' => null,
        'highway_miles' => null,
        'city_miles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'year' => 'year',
        'make' => 'make',
        'model' => 'model',
        'trim' => 'trim',
        'body_type' => 'body_type',
        'body_subtype' => 'body_subtype',
        'vehicle_type' => 'vehicle_type',
        'drivetrain' => 'drivetrain',
        'fuel_type' => 'fuel_type',
        'made_in' => 'made_in',
        'engine' => 'engine',
        'engine_block' => 'engine_block',
        'engine_size' => 'engine_size',
        'engine_measure' => 'engine_measure',
        'engine_aspiration' => 'engine_aspiration',
        'transmission' => 'transmission',
        'doors' => 'doors',
        'cylinders' => 'cylinders',
        'steering_type' => 'steering_type',
        'antibrake_sys' => 'antibrake_sys',
        'tank_size' => 'tank_size',
        'overall_height' => 'overall_height',
        'overall_length' => 'overall_length',
        'overall_width' => 'overall_width',
        'std_seating' => 'std_seating',
        'highway_miles' => 'highway_miles',
        'city_miles' => 'city_miles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'year' => 'setYear',
        'make' => 'setMake',
        'model' => 'setModel',
        'trim' => 'setTrim',
        'body_type' => 'setBodyType',
        'body_subtype' => 'setBodySubtype',
        'vehicle_type' => 'setVehicleType',
        'drivetrain' => 'setDrivetrain',
        'fuel_type' => 'setFuelType',
        'made_in' => 'setMadeIn',
        'engine' => 'setEngine',
        'engine_block' => 'setEngineBlock',
        'engine_size' => 'setEngineSize',
        'engine_measure' => 'setEngineMeasure',
        'engine_aspiration' => 'setEngineAspiration',
        'transmission' => 'setTransmission',
        'doors' => 'setDoors',
        'cylinders' => 'setCylinders',
        'steering_type' => 'setSteeringType',
        'antibrake_sys' => 'setAntibrakeSys',
        'tank_size' => 'setTankSize',
        'overall_height' => 'setOverallHeight',
        'overall_length' => 'setOverallLength',
        'overall_width' => 'setOverallWidth',
        'std_seating' => 'setStdSeating',
        'highway_miles' => 'setHighwayMiles',
        'city_miles' => 'setCityMiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'year' => 'getYear',
        'make' => 'getMake',
        'model' => 'getModel',
        'trim' => 'getTrim',
        'body_type' => 'getBodyType',
        'body_subtype' => 'getBodySubtype',
        'vehicle_type' => 'getVehicleType',
        'drivetrain' => 'getDrivetrain',
        'fuel_type' => 'getFuelType',
        'made_in' => 'getMadeIn',
        'engine' => 'getEngine',
        'engine_block' => 'getEngineBlock',
        'engine_size' => 'getEngineSize',
        'engine_measure' => 'getEngineMeasure',
        'engine_aspiration' => 'getEngineAspiration',
        'transmission' => 'getTransmission',
        'doors' => 'getDoors',
        'cylinders' => 'getCylinders',
        'steering_type' => 'getSteeringType',
        'antibrake_sys' => 'getAntibrakeSys',
        'tank_size' => 'getTankSize',
        'overall_height' => 'getOverallHeight',
        'overall_length' => 'getOverallLength',
        'overall_width' => 'getOverallWidth',
        'std_seating' => 'getStdSeating',
        'highway_miles' => 'getHighwayMiles',
        'city_miles' => 'getCityMiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['trim'] = isset($data['trim']) ? $data['trim'] : null;
        $this->container['body_type'] = isset($data['body_type']) ? $data['body_type'] : null;
        $this->container['body_subtype'] = isset($data['body_subtype']) ? $data['body_subtype'] : null;
        $this->container['vehicle_type'] = isset($data['vehicle_type']) ? $data['vehicle_type'] : null;
        $this->container['drivetrain'] = isset($data['drivetrain']) ? $data['drivetrain'] : null;
        $this->container['fuel_type'] = isset($data['fuel_type']) ? $data['fuel_type'] : null;
        $this->container['made_in'] = isset($data['made_in']) ? $data['made_in'] : null;
        $this->container['engine'] = isset($data['engine']) ? $data['engine'] : null;
        $this->container['engine_block'] = isset($data['engine_block']) ? $data['engine_block'] : null;
        $this->container['engine_size'] = isset($data['engine_size']) ? $data['engine_size'] : null;
        $this->container['engine_measure'] = isset($data['engine_measure']) ? $data['engine_measure'] : null;
        $this->container['engine_aspiration'] = isset($data['engine_aspiration']) ? $data['engine_aspiration'] : null;
        $this->container['transmission'] = isset($data['transmission']) ? $data['transmission'] : null;
        $this->container['doors'] = isset($data['doors']) ? $data['doors'] : null;
        $this->container['cylinders'] = isset($data['cylinders']) ? $data['cylinders'] : null;
        $this->container['steering_type'] = isset($data['steering_type']) ? $data['steering_type'] : null;
        $this->container['antibrake_sys'] = isset($data['antibrake_sys']) ? $data['antibrake_sys'] : null;
        $this->container['tank_size'] = isset($data['tank_size']) ? $data['tank_size'] : null;
        $this->container['overall_height'] = isset($data['overall_height']) ? $data['overall_height'] : null;
        $this->container['overall_length'] = isset($data['overall_length']) ? $data['overall_length'] : null;
        $this->container['overall_width'] = isset($data['overall_width']) ? $data['overall_width'] : null;
        $this->container['std_seating'] = isset($data['std_seating']) ? $data['std_seating'] : null;
        $this->container['highway_miles'] = isset($data['highway_miles']) ? $data['highway_miles'] : null;
        $this->container['city_miles'] = isset($data['city_miles']) ? $data['city_miles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets year
     *
     * @return float
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param float $year Year of the Car
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make Car Make
     *
     * @return $this
     */
    public function setMake($make)
    {
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Car model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets trim
     *
     * @return string
     */
    public function getTrim()
    {
        return $this->container['trim'];
    }

    /**
     * Sets trim
     *
     * @param string $trim Trim of the car
     *
     * @return $this
     */
    public function setTrim($trim)
    {
        $this->container['trim'] = $trim;

        return $this;
    }

    /**
     * Gets body_type
     *
     * @return string
     */
    public function getBodyType()
    {
        return $this->container['body_type'];
    }

    /**
     * Sets body_type
     *
     * @param string $body_type Body type of the car
     *
     * @return $this
     */
    public function setBodyType($body_type)
    {
        $this->container['body_type'] = $body_type;

        return $this;
    }

    /**
     * Gets body_subtype
     *
     * @return string
     */
    public function getBodySubtype()
    {
        return $this->container['body_subtype'];
    }

    /**
     * Sets body_subtype
     *
     * @param string $body_subtype Body type of the car
     *
     * @return $this
     */
    public function setBodySubtype($body_subtype)
    {
        $this->container['body_subtype'] = $body_subtype;

        return $this;
    }

    /**
     * Gets vehicle_type
     *
     * @return string
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     *
     * @param string $vehicle_type Vehicle type of the car
     *
     * @return $this
     */
    public function setVehicleType($vehicle_type)
    {
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets drivetrain
     *
     * @return string
     */
    public function getDrivetrain()
    {
        return $this->container['drivetrain'];
    }

    /**
     * Sets drivetrain
     *
     * @param string $drivetrain Drivetrain of the car
     *
     * @return $this
     */
    public function setDrivetrain($drivetrain)
    {
        $this->container['drivetrain'] = $drivetrain;

        return $this;
    }

    /**
     * Gets fuel_type
     *
     * @return string
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     *
     * @param string $fuel_type Fuel type of the car
     *
     * @return $this
     */
    public function setFuelType($fuel_type)
    {
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets made_in
     *
     * @return string
     */
    public function getMadeIn()
    {
        return $this->container['made_in'];
    }

    /**
     * Sets made_in
     *
     * @param string $made_in Made in of the car
     *
     * @return $this
     */
    public function setMadeIn($made_in)
    {
        $this->container['made_in'] = $made_in;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return string
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param string $engine Engine of the car
     *
     * @return $this
     */
    public function setEngine($engine)
    {
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets engine_block
     *
     * @return string
     */
    public function getEngineBlock()
    {
        return $this->container['engine_block'];
    }

    /**
     * Sets engine_block
     *
     * @param string $engine_block Engine block of the car
     *
     * @return $this
     */
    public function setEngineBlock($engine_block)
    {
        $this->container['engine_block'] = $engine_block;

        return $this;
    }

    /**
     * Gets engine_size
     *
     * @return string
     */
    public function getEngineSize()
    {
        return $this->container['engine_size'];
    }

    /**
     * Sets engine_size
     *
     * @param string $engine_size Engine size of the car
     *
     * @return $this
     */
    public function setEngineSize($engine_size)
    {
        $this->container['engine_size'] = $engine_size;

        return $this;
    }

    /**
     * Gets engine_measure
     *
     * @return string
     */
    public function getEngineMeasure()
    {
        return $this->container['engine_measure'];
    }

    /**
     * Sets engine_measure
     *
     * @param string $engine_measure Engine block of the car
     *
     * @return $this
     */
    public function setEngineMeasure($engine_measure)
    {
        $this->container['engine_measure'] = $engine_measure;

        return $this;
    }

    /**
     * Gets engine_aspiration
     *
     * @return string
     */
    public function getEngineAspiration()
    {
        return $this->container['engine_aspiration'];
    }

    /**
     * Sets engine_aspiration
     *
     * @param string $engine_aspiration Engine aspiration of the car
     *
     * @return $this
     */
    public function setEngineAspiration($engine_aspiration)
    {
        $this->container['engine_aspiration'] = $engine_aspiration;

        return $this;
    }

    /**
     * Gets transmission
     *
     * @return string
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     *
     * @param string $transmission Transmission of the car
     *
     * @return $this
     */
    public function setTransmission($transmission)
    {
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets doors
     *
     * @return float
     */
    public function getDoors()
    {
        return $this->container['doors'];
    }

    /**
     * Sets doors
     *
     * @param float $doors No of doors of the car
     *
     * @return $this
     */
    public function setDoors($doors)
    {
        $this->container['doors'] = $doors;

        return $this;
    }

    /**
     * Gets cylinders
     *
     * @return float
     */
    public function getCylinders()
    {
        return $this->container['cylinders'];
    }

    /**
     * Sets cylinders
     *
     * @param float $cylinders No of cylinders of the car
     *
     * @return $this
     */
    public function setCylinders($cylinders)
    {
        $this->container['cylinders'] = $cylinders;

        return $this;
    }

    /**
     * Gets steering_type
     *
     * @return string
     */
    public function getSteeringType()
    {
        return $this->container['steering_type'];
    }

    /**
     * Sets steering_type
     *
     * @param string $steering_type Steering type of the car
     *
     * @return $this
     */
    public function setSteeringType($steering_type)
    {
        $this->container['steering_type'] = $steering_type;

        return $this;
    }

    /**
     * Gets antibrake_sys
     *
     * @return string
     */
    public function getAntibrakeSys()
    {
        return $this->container['antibrake_sys'];
    }

    /**
     * Sets antibrake_sys
     *
     * @param string $antibrake_sys Antibrake system of the car
     *
     * @return $this
     */
    public function setAntibrakeSys($antibrake_sys)
    {
        $this->container['antibrake_sys'] = $antibrake_sys;

        return $this;
    }

    /**
     * Gets tank_size
     *
     * @return string
     */
    public function getTankSize()
    {
        return $this->container['tank_size'];
    }

    /**
     * Sets tank_size
     *
     * @param string $tank_size Tank size of the car
     *
     * @return $this
     */
    public function setTankSize($tank_size)
    {
        $this->container['tank_size'] = $tank_size;

        return $this;
    }

    /**
     * Gets overall_height
     *
     * @return string
     */
    public function getOverallHeight()
    {
        return $this->container['overall_height'];
    }

    /**
     * Sets overall_height
     *
     * @param string $overall_height Overall height of the car
     *
     * @return $this
     */
    public function setOverallHeight($overall_height)
    {
        $this->container['overall_height'] = $overall_height;

        return $this;
    }

    /**
     * Gets overall_length
     *
     * @return string
     */
    public function getOverallLength()
    {
        return $this->container['overall_length'];
    }

    /**
     * Sets overall_length
     *
     * @param string $overall_length Overall length of the car
     *
     * @return $this
     */
    public function setOverallLength($overall_length)
    {
        $this->container['overall_length'] = $overall_length;

        return $this;
    }

    /**
     * Gets overall_width
     *
     * @return string
     */
    public function getOverallWidth()
    {
        return $this->container['overall_width'];
    }

    /**
     * Sets overall_width
     *
     * @param string $overall_width Overall width of the car
     *
     * @return $this
     */
    public function setOverallWidth($overall_width)
    {
        $this->container['overall_width'] = $overall_width;

        return $this;
    }

    /**
     * Gets std_seating
     *
     * @return string
     */
    public function getStdSeating()
    {
        return $this->container['std_seating'];
    }

    /**
     * Sets std_seating
     *
     * @param string $std_seating Std seating of the car
     *
     * @return $this
     */
    public function setStdSeating($std_seating)
    {
        $this->container['std_seating'] = $std_seating;

        return $this;
    }

    /**
     * Gets highway_miles
     *
     * @return string
     */
    public function getHighwayMiles()
    {
        return $this->container['highway_miles'];
    }

    /**
     * Sets highway_miles
     *
     * @param string $highway_miles Highway miles of the car
     *
     * @return $this
     */
    public function setHighwayMiles($highway_miles)
    {
        $this->container['highway_miles'] = $highway_miles;

        return $this;
    }

    /**
     * Gets city_miles
     *
     * @return string
     */
    public function getCityMiles()
    {
        return $this->container['city_miles'];
    }

    /**
     * Sets city_miles
     *
     * @param string $city_miles City miles of the car
     *
     * @return $this
     */
    public function setCityMiles($city_miles)
    {
        $this->container['city_miles'] = $city_miles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


