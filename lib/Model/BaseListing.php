<?php
/**
 * BaseListing
 *
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Model;

use \ArrayAccess;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * BaseListing Class Doc Comment
 *
 * @category Class
 * @description Minimal set of attributes describing a listing
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseListing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseListing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'heading' => 'string',
        'vin' => 'string',
        'stock_no' => 'string',
        'price' => 'string',
        'miles' => 'string',
        'inventory_type' => 'string',
        'last_seen_at' => 'float',
        'last_seen_at_date' => 'string',
        'scraped_at_date' => 'float',
        'first_seen_at' => 'float',
        'first_seen_at_date' => 'string',
        'ref_price' => 'string',
        'ref_miles' => 'string',
        'ref_price_dt' => 'int',
        'ref_miles_dt' => 'int',
        'dom' => 'float',
        'dom_180' => 'float',
        'dom_active' => 'float',
        'seller_type' => 'string',
        'exterior_color' => 'string',
        'interior_color' => 'string',
        'vdp_url' => 'string',
        'carfax_1_owner' => 'bool',
        'carfax_clean_title' => 'bool',
        'source' => 'string',
        'financing_options' => '\marketcheck\api\sdk\Model\ListingFinance[]',
        'leasing_options' => '\marketcheck\api\sdk\Model\ListingLease[]',
        'media' => '\marketcheck\api\sdk\Model\ListingMedia',
        'build' => '\marketcheck\api\sdk\Model\Build',
        'dealer' => '\marketcheck\api\sdk\Model\Dealer',
        'is_certified' => 'int',
        'distance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'heading' => null,
        'vin' => null,
        'stock_no' => null,
        'price' => null,
        'miles' => null,
        'inventory_type' => null,
        'last_seen_at' => null,
        'last_seen_at_date' => null,
        'scraped_at_date' => null,
        'first_seen_at' => null,
        'first_seen_at_date' => null,
        'ref_price' => null,
        'ref_miles' => null,
        'ref_price_dt' => null,
        'ref_miles_dt' => null,
        'dom' => null,
        'dom_180' => null,
        'dom_active' => null,
        'seller_type' => null,
        'exterior_color' => null,
        'interior_color' => null,
        'vdp_url' => null,
        'carfax_1_owner' => null,
        'carfax_clean_title' => null,
        'source' => null,
        'financing_options' => null,
        'leasing_options' => null,
        'media' => null,
        'build' => null,
        'dealer' => null,
        'is_certified' => null,
        'distance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'heading' => 'heading',
        'vin' => 'vin',
        'stock_no' => 'stock_no',
        'price' => 'price',
        'miles' => 'miles',
        'inventory_type' => 'inventory_type',
        'last_seen_at' => 'last_seen_at',
        'last_seen_at_date' => 'last_seen_at_date',
        'scraped_at_date' => 'scraped_at_date',
        'first_seen_at' => 'first_seen_at',
        'first_seen_at_date' => 'first_seen_at_date',
        'ref_price' => 'ref_price',
        'ref_miles' => 'ref_miles',
        'ref_price_dt' => 'ref_price_dt',
        'ref_miles_dt' => 'ref_miles_dt',
        'dom' => 'dom',
        'dom_180' => 'dom_180',
        'dom_active' => 'dom_active',
        'seller_type' => 'seller_type',
        'exterior_color' => 'exterior_color',
        'interior_color' => 'interior_color',
        'vdp_url' => 'vdp_url',
        'carfax_1_owner' => 'carfax_1_owner',
        'carfax_clean_title' => 'carfax_clean_title',
        'source' => 'source',
        'financing_options' => 'financing_options',
        'leasing_options' => 'leasing_options',
        'media' => 'media',
        'build' => 'build',
        'dealer' => 'dealer',
        'is_certified' => 'is_certified',
        'distance' => 'distance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'heading' => 'setHeading',
        'vin' => 'setVin',
        'stock_no' => 'setStockNo',
        'price' => 'setPrice',
        'miles' => 'setMiles',
        'inventory_type' => 'setInventoryType',
        'last_seen_at' => 'setLastSeenAt',
        'last_seen_at_date' => 'setLastSeenAtDate',
        'scraped_at_date' => 'setScrapedAtDate',
        'first_seen_at' => 'setFirstSeenAt',
        'first_seen_at_date' => 'setFirstSeenAtDate',
        'ref_price' => 'setRefPrice',
        'ref_miles' => 'setRefMiles',
        'ref_price_dt' => 'setRefPriceDt',
        'ref_miles_dt' => 'setRefMilesDt',
        'dom' => 'setDom',
        'dom_180' => 'setDom180',
        'dom_active' => 'setDomActive',
        'seller_type' => 'setSellerType',
        'exterior_color' => 'setExteriorColor',
        'interior_color' => 'setInteriorColor',
        'vdp_url' => 'setVdpUrl',
        'carfax_1_owner' => 'setCarfax1Owner',
        'carfax_clean_title' => 'setCarfaxCleanTitle',
        'source' => 'setSource',
        'financing_options' => 'setFinancingOptions',
        'leasing_options' => 'setLeasingOptions',
        'media' => 'setMedia',
        'build' => 'setBuild',
        'dealer' => 'setDealer',
        'is_certified' => 'setIsCertified',
        'distance' => 'setDistance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'heading' => 'getHeading',
        'vin' => 'getVin',
        'stock_no' => 'getStockNo',
        'price' => 'getPrice',
        'miles' => 'getMiles',
        'inventory_type' => 'getInventoryType',
        'last_seen_at' => 'getLastSeenAt',
        'last_seen_at_date' => 'getLastSeenAtDate',
        'scraped_at_date' => 'getScrapedAtDate',
        'first_seen_at' => 'getFirstSeenAt',
        'first_seen_at_date' => 'getFirstSeenAtDate',
        'ref_price' => 'getRefPrice',
        'ref_miles' => 'getRefMiles',
        'ref_price_dt' => 'getRefPriceDt',
        'ref_miles_dt' => 'getRefMilesDt',
        'dom' => 'getDom',
        'dom_180' => 'getDom180',
        'dom_active' => 'getDomActive',
        'seller_type' => 'getSellerType',
        'exterior_color' => 'getExteriorColor',
        'interior_color' => 'getInteriorColor',
        'vdp_url' => 'getVdpUrl',
        'carfax_1_owner' => 'getCarfax1Owner',
        'carfax_clean_title' => 'getCarfaxCleanTitle',
        'source' => 'getSource',
        'financing_options' => 'getFinancingOptions',
        'leasing_options' => 'getLeasingOptions',
        'media' => 'getMedia',
        'build' => 'getBuild',
        'dealer' => 'getDealer',
        'is_certified' => 'getIsCertified',
        'distance' => 'getDistance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['heading'] = isset($data['heading']) ? $data['heading'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['stock_no'] = isset($data['stock_no']) ? $data['stock_no'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['miles'] = isset($data['miles']) ? $data['miles'] : null;
        $this->container['inventory_type'] = isset($data['inventory_type']) ? $data['inventory_type'] : null;
        $this->container['last_seen_at'] = isset($data['last_seen_at']) ? $data['last_seen_at'] : null;
        $this->container['last_seen_at_date'] = isset($data['last_seen_at_date']) ? $data['last_seen_at_date'] : null;
        $this->container['scraped_at_date'] = isset($data['scraped_at_date']) ? $data['scraped_at_date'] : null;
        $this->container['first_seen_at'] = isset($data['first_seen_at']) ? $data['first_seen_at'] : null;
        $this->container['first_seen_at_date'] = isset($data['first_seen_at_date']) ? $data['first_seen_at_date'] : null;
        $this->container['ref_price'] = isset($data['ref_price']) ? $data['ref_price'] : null;
        $this->container['ref_miles'] = isset($data['ref_miles']) ? $data['ref_miles'] : null;
        $this->container['ref_price_dt'] = isset($data['ref_price_dt']) ? $data['ref_price_dt'] : null;
        $this->container['ref_miles_dt'] = isset($data['ref_miles_dt']) ? $data['ref_miles_dt'] : null;
        $this->container['dom'] = isset($data['dom']) ? $data['dom'] : null;
        $this->container['dom_180'] = isset($data['dom_180']) ? $data['dom_180'] : null;
        $this->container['dom_active'] = isset($data['dom_active']) ? $data['dom_active'] : null;
        $this->container['seller_type'] = isset($data['seller_type']) ? $data['seller_type'] : null;
        $this->container['exterior_color'] = isset($data['exterior_color']) ? $data['exterior_color'] : null;
        $this->container['interior_color'] = isset($data['interior_color']) ? $data['interior_color'] : null;
        $this->container['vdp_url'] = isset($data['vdp_url']) ? $data['vdp_url'] : null;
        $this->container['carfax_1_owner'] = isset($data['carfax_1_owner']) ? $data['carfax_1_owner'] : null;
        $this->container['carfax_clean_title'] = isset($data['carfax_clean_title']) ? $data['carfax_clean_title'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['financing_options'] = isset($data['financing_options']) ? $data['financing_options'] : null;
        $this->container['leasing_options'] = isset($data['leasing_options']) ? $data['leasing_options'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['build'] = isset($data['build']) ? $data['build'] : null;
        $this->container['dealer'] = isset($data['dealer']) ? $data['dealer'] : null;
        $this->container['is_certified'] = isset($data['is_certified']) ? $data['is_certified'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier representing a specific listing from the Marketcheck database
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets heading
     *
     * @return string
     */
    public function getHeading()
    {
        return $this->container['heading'];
    }

    /**
     * Sets heading
     *
     * @param string $heading Listing title as displayed on the source website
     *
     * @return $this
     */
    public function setHeading($heading)
    {
        $this->container['heading'] = $heading;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin VIN for the car
     *
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets stock_no
     *
     * @return string
     */
    public function getStockNo()
    {
        return $this->container['stock_no'];
    }

    /**
     * Sets stock_no
     *
     * @param string $stock_no Stock no of the car
     *
     * @return $this
     */
    public function setStockNo($stock_no)
    {
        $this->container['stock_no'] = $stock_no;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Asking price for the car
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets miles
     *
     * @return string
     */
    public function getMiles()
    {
        return $this->container['miles'];
    }

    /**
     * Sets miles
     *
     * @param string $miles Odometer reading / reported miles usage for the car
     *
     * @return $this
     */
    public function setMiles($miles)
    {
        $this->container['miles'] = $miles;

        return $this;
    }

    /**
     * Gets inventory_type
     *
     * @return string
     */
    public function getInventoryType()
    {
        return $this->container['inventory_type'];
    }

    /**
     * Sets inventory_type
     *
     * @param string $inventory_type Inventory type of car
     *
     * @return $this
     */
    public function setInventoryType($inventory_type)
    {
        $this->container['inventory_type'] = $inventory_type;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return float
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param float $last_seen_at Listing last seen at (most recent) timestamp
     *
     * @return $this
     */
    public function setLastSeenAt($last_seen_at)
    {
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets last_seen_at_date
     *
     * @return string
     */
    public function getLastSeenAtDate()
    {
        return $this->container['last_seen_at_date'];
    }

    /**
     * Sets last_seen_at_date
     *
     * @param string $last_seen_at_date Listing last seen at (most recent) date
     *
     * @return $this
     */
    public function setLastSeenAtDate($last_seen_at_date)
    {
        $this->container['last_seen_at_date'] = $last_seen_at_date;

        return $this;
    }

    /**
     * Gets scraped_at_date
     *
     * @return float
     */
    public function getScrapedAtDate()
    {
        return $this->container['scraped_at_date'];
    }

    /**
     * Sets scraped_at_date
     *
     * @param float $scraped_at_date Listing first seen at first scraped date
     *
     * @return $this
     */
    public function setScrapedAtDate($scraped_at_date)
    {
        $this->container['scraped_at_date'] = $scraped_at_date;

        return $this;
    }

    /**
     * Gets first_seen_at
     *
     * @return float
     */
    public function getFirstSeenAt()
    {
        return $this->container['first_seen_at'];
    }

    /**
     * Sets first_seen_at
     *
     * @param float $first_seen_at Listing first seen at first scraped timestamp
     *
     * @return $this
     */
    public function setFirstSeenAt($first_seen_at)
    {
        $this->container['first_seen_at'] = $first_seen_at;

        return $this;
    }

    /**
     * Gets first_seen_at_date
     *
     * @return string
     */
    public function getFirstSeenAtDate()
    {
        return $this->container['first_seen_at_date'];
    }

    /**
     * Sets first_seen_at_date
     *
     * @param string $first_seen_at_date Listing first seen at first scraped date
     *
     * @return $this
     */
    public function setFirstSeenAtDate($first_seen_at_date)
    {
        $this->container['first_seen_at_date'] = $first_seen_at_date;

        return $this;
    }

    /**
     * Gets ref_price
     *
     * @return string
     */
    public function getRefPrice()
    {
        return $this->container['ref_price'];
    }

    /**
     * Sets ref_price
     *
     * @param string $ref_price Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
     *
     * @return $this
     */
    public function setRefPrice($ref_price)
    {
        $this->container['ref_price'] = $ref_price;

        return $this;
    }

    /**
     * Gets ref_miles
     *
     * @return string
     */
    public function getRefMiles()
    {
        return $this->container['ref_miles'];
    }

    /**
     * Sets ref_miles
     *
     * @param string $ref_miles Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
     *
     * @return $this
     */
    public function setRefMiles($ref_miles)
    {
        $this->container['ref_miles'] = $ref_miles;

        return $this;
    }

    /**
     * Gets ref_price_dt
     *
     * @return int
     */
    public function getRefPriceDt()
    {
        return $this->container['ref_price_dt'];
    }

    /**
     * Sets ref_price_dt
     *
     * @param int $ref_price_dt The date at which the last price was reported online. This is earlier to last_seen_date
     *
     * @return $this
     */
    public function setRefPriceDt($ref_price_dt)
    {
        $this->container['ref_price_dt'] = $ref_price_dt;

        return $this;
    }

    /**
     * Gets ref_miles_dt
     *
     * @return int
     */
    public function getRefMilesDt()
    {
        return $this->container['ref_miles_dt'];
    }

    /**
     * Sets ref_miles_dt
     *
     * @param int $ref_miles_dt The date at which the last miles was reported online. This is earlier to last_seen_date
     *
     * @return $this
     */
    public function setRefMilesDt($ref_miles_dt)
    {
        $this->container['ref_miles_dt'] = $ref_miles_dt;

        return $this;
    }

    /**
     * Gets dom
     *
     * @return float
     */
    public function getDom()
    {
        return $this->container['dom'];
    }

    /**
     * Sets dom
     *
     * @param float $dom Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
     *
     * @return $this
     */
    public function setDom($dom)
    {
        $this->container['dom'] = $dom;

        return $this;
    }

    /**
     * Gets dom_180
     *
     * @return float
     */
    public function getDom180()
    {
        return $this->container['dom_180'];
    }

    /**
     * Sets dom_180
     *
     * @param float $dom_180 Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
     *
     * @return $this
     */
    public function setDom180($dom_180)
    {
        $this->container['dom_180'] = $dom_180;

        return $this;
    }

    /**
     * Gets dom_active
     *
     * @return float
     */
    public function getDomActive()
    {
        return $this->container['dom_active'];
    }

    /**
     * Sets dom_active
     *
     * @param float $dom_active Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
     *
     * @return $this
     */
    public function setDomActive($dom_active)
    {
        $this->container['dom_active'] = $dom_active;

        return $this;
    }

    /**
     * Gets seller_type
     *
     * @return string
     */
    public function getSellerType()
    {
        return $this->container['seller_type'];
    }

    /**
     * Sets seller_type
     *
     * @param string $seller_type Seller type for the car
     *
     * @return $this
     */
    public function setSellerType($seller_type)
    {
        $this->container['seller_type'] = $seller_type;

        return $this;
    }

    /**
     * Gets exterior_color
     *
     * @return string
     */
    public function getExteriorColor()
    {
        return $this->container['exterior_color'];
    }

    /**
     * Sets exterior_color
     *
     * @param string $exterior_color Exterior color of the car
     *
     * @return $this
     */
    public function setExteriorColor($exterior_color)
    {
        $this->container['exterior_color'] = $exterior_color;

        return $this;
    }

    /**
     * Gets interior_color
     *
     * @return string
     */
    public function getInteriorColor()
    {
        return $this->container['interior_color'];
    }

    /**
     * Sets interior_color
     *
     * @param string $interior_color Interior color of the car
     *
     * @return $this
     */
    public function setInteriorColor($interior_color)
    {
        $this->container['interior_color'] = $interior_color;

        return $this;
    }

    /**
     * Gets vdp_url
     *
     * @return string
     */
    public function getVdpUrl()
    {
        return $this->container['vdp_url'];
    }

    /**
     * Sets vdp_url
     *
     * @param string $vdp_url Vehicle Details Page url of the specific car
     *
     * @return $this
     */
    public function setVdpUrl($vdp_url)
    {
        $this->container['vdp_url'] = $vdp_url;

        return $this;
    }

    /**
     * Gets carfax_1_owner
     *
     * @return bool
     */
    public function getCarfax1Owner()
    {
        return $this->container['carfax_1_owner'];
    }

    /**
     * Sets carfax_1_owner
     *
     * @param bool $carfax_1_owner Flag to indicate whether listing is carfax_1_owner
     *
     * @return $this
     */
    public function setCarfax1Owner($carfax_1_owner)
    {
        $this->container['carfax_1_owner'] = $carfax_1_owner;

        return $this;
    }

    /**
     * Gets carfax_clean_title
     *
     * @return bool
     */
    public function getCarfaxCleanTitle()
    {
        return $this->container['carfax_clean_title'];
    }

    /**
     * Sets carfax_clean_title
     *
     * @param bool $carfax_clean_title Flag to indicate whether listing is carfax_clean_title
     *
     * @return $this
     */
    public function setCarfaxCleanTitle($carfax_clean_title)
    {
        $this->container['carfax_clean_title'] = $carfax_clean_title;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Source domain of the listing
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets financing_options
     *
     * @return \marketcheck\api\sdk\Model\ListingFinance[]
     */
    public function getFinancingOptions()
    {
        return $this->container['financing_options'];
    }

    /**
     * Sets financing_options
     *
     * @param \marketcheck\api\sdk\Model\ListingFinance[] $financing_options Array of all finance offers for this listing
     *
     * @return $this
     */
    public function setFinancingOptions($financing_options)
    {
        $this->container['financing_options'] = $financing_options;

        return $this;
    }

    /**
     * Gets leasing_options
     *
     * @return \marketcheck\api\sdk\Model\ListingLease[]
     */
    public function getLeasingOptions()
    {
        return $this->container['leasing_options'];
    }

    /**
     * Sets leasing_options
     *
     * @param \marketcheck\api\sdk\Model\ListingLease[] $leasing_options Array of all finance offers for this listing
     *
     * @return $this
     */
    public function setLeasingOptions($leasing_options)
    {
        $this->container['leasing_options'] = $leasing_options;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \marketcheck\api\sdk\Model\ListingMedia
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \marketcheck\api\sdk\Model\ListingMedia $media Car Media Attributes - main photo link/url and photo links
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets build
     *
     * @return \marketcheck\api\sdk\Model\Build
     */
    public function getBuild()
    {
        return $this->container['build'];
    }

    /**
     * Sets build
     *
     * @param \marketcheck\api\sdk\Model\Build $build build
     *
     * @return $this
     */
    public function setBuild($build)
    {
        $this->container['build'] = $build;

        return $this;
    }

    /**
     * Gets dealer
     *
     * @return \marketcheck\api\sdk\Model\Dealer
     */
    public function getDealer()
    {
        return $this->container['dealer'];
    }

    /**
     * Sets dealer
     *
     * @param \marketcheck\api\sdk\Model\Dealer $dealer dealer
     *
     * @return $this
     */
    public function setDealer($dealer)
    {
        $this->container['dealer'] = $dealer;

        return $this;
    }

    /**
     * Gets is_certified
     *
     * @return int
     */
    public function getIsCertified()
    {
        return $this->container['is_certified'];
    }

    /**
     * Sets is_certified
     *
     * @param int $is_certified Certified car
     *
     * @return $this
     */
    public function setIsCertified($is_certified)
    {
        $this->container['is_certified'] = $is_certified;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance Distance of the car's location from the specified user lcoation
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


