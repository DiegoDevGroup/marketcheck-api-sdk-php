<?php
/**
 * SafetyRating
 *
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Model;

use \ArrayAccess;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * SafetyRating Class Doc Comment
 *
 * @category Class
 * @description Describes the Safety Ratings of current listing
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SafetyRating implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SafetyRating';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'overall_rating' => 'float',
        'roll_over_rating' => 'float',
        'driver_side_rating' => 'float',
        'driver_front_rating' => 'float',
        'passenger_front_rating' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'overall_rating' => null,
        'roll_over_rating' => null,
        'driver_side_rating' => null,
        'driver_front_rating' => null,
        'passenger_front_rating' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overall_rating' => 'overall_rating',
        'roll_over_rating' => 'roll_over_rating',
        'driver_side_rating' => 'driver_side_rating',
        'driver_front_rating' => 'driver_front_rating',
        'passenger_front_rating' => 'passenger_front_rating'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overall_rating' => 'setOverallRating',
        'roll_over_rating' => 'setRollOverRating',
        'driver_side_rating' => 'setDriverSideRating',
        'driver_front_rating' => 'setDriverFrontRating',
        'passenger_front_rating' => 'setPassengerFrontRating'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overall_rating' => 'getOverallRating',
        'roll_over_rating' => 'getRollOverRating',
        'driver_side_rating' => 'getDriverSideRating',
        'driver_front_rating' => 'getDriverFrontRating',
        'passenger_front_rating' => 'getPassengerFrontRating'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overall_rating'] = isset($data['overall_rating']) ? $data['overall_rating'] : null;
        $this->container['roll_over_rating'] = isset($data['roll_over_rating']) ? $data['roll_over_rating'] : null;
        $this->container['driver_side_rating'] = isset($data['driver_side_rating']) ? $data['driver_side_rating'] : null;
        $this->container['driver_front_rating'] = isset($data['driver_front_rating']) ? $data['driver_front_rating'] : null;
        $this->container['passenger_front_rating'] = isset($data['passenger_front_rating']) ? $data['passenger_front_rating'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overall_rating
     *
     * @return float
     */
    public function getOverallRating()
    {
        return $this->container['overall_rating'];
    }

    /**
     * Sets overall_rating
     *
     * @param float $overall_rating Overall rating of the Listing on scale 1-5
     *
     * @return $this
     */
    public function setOverallRating($overall_rating)
    {
        $this->container['overall_rating'] = $overall_rating;

        return $this;
    }

    /**
     * Gets roll_over_rating
     *
     * @return float
     */
    public function getRollOverRating()
    {
        return $this->container['roll_over_rating'];
    }

    /**
     * Sets roll_over_rating
     *
     * @param float $roll_over_rating Roll Over rating of the Listing on scale 1-5
     *
     * @return $this
     */
    public function setRollOverRating($roll_over_rating)
    {
        $this->container['roll_over_rating'] = $roll_over_rating;

        return $this;
    }

    /**
     * Gets driver_side_rating
     *
     * @return float
     */
    public function getDriverSideRating()
    {
        return $this->container['driver_side_rating'];
    }

    /**
     * Sets driver_side_rating
     *
     * @param float $driver_side_rating Driver Side rating of the Listing on scale 1-5
     *
     * @return $this
     */
    public function setDriverSideRating($driver_side_rating)
    {
        $this->container['driver_side_rating'] = $driver_side_rating;

        return $this;
    }

    /**
     * Gets driver_front_rating
     *
     * @return float
     */
    public function getDriverFrontRating()
    {
        return $this->container['driver_front_rating'];
    }

    /**
     * Sets driver_front_rating
     *
     * @param float $driver_front_rating Driver front rating of the Listing on scale 1-5
     *
     * @return $this
     */
    public function setDriverFrontRating($driver_front_rating)
    {
        $this->container['driver_front_rating'] = $driver_front_rating;

        return $this;
    }

    /**
     * Gets passenger_front_rating
     *
     * @return float
     */
    public function getPassengerFrontRating()
    {
        return $this->container['passenger_front_rating'];
    }

    /**
     * Sets passenger_front_rating
     *
     * @param float $passenger_front_rating Passenger front rating of the Listing on scale 1-5
     *
     * @return $this
     */
    public function setPassengerFrontRating($passenger_front_rating)
    {
        $this->container['passenger_front_rating'] = $passenger_front_rating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


