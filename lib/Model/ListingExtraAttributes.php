<?php
/**
 * ListingExtraAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Model;

use \ArrayAccess;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * ListingExtraAttributes Class Doc Comment
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingExtraAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingExtraAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'options' => 'string[]',
        'features' => 'string[]',
        'electronics_f' => 'string[]',
        'exterior_f' => 'string[]',
        'technical_f' => 'string[]',
        'standard_f' => 'string[]',
        'dealer_added_f' => 'string[]',
        'interior_f' => 'string[]',
        'safety_f' => 'string[]',
        'seller_comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'options' => null,
        'features' => null,
        'electronics_f' => null,
        'exterior_f' => null,
        'technical_f' => null,
        'standard_f' => null,
        'dealer_added_f' => null,
        'interior_f' => null,
        'safety_f' => null,
        'seller_comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'options' => 'options',
        'features' => 'features',
        'electronics_f' => 'electronics_f',
        'exterior_f' => 'exterior_f',
        'technical_f' => 'technical_f',
        'standard_f' => 'standard_f',
        'dealer_added_f' => 'dealer_added_f',
        'interior_f' => 'interior_f',
        'safety_f' => 'safety_f',
        'seller_comments' => 'seller_comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'options' => 'setOptions',
        'features' => 'setFeatures',
        'electronics_f' => 'setElectronicsF',
        'exterior_f' => 'setExteriorF',
        'technical_f' => 'setTechnicalF',
        'standard_f' => 'setStandardF',
        'dealer_added_f' => 'setDealerAddedF',
        'interior_f' => 'setInteriorF',
        'safety_f' => 'setSafetyF',
        'seller_comments' => 'setSellerComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'options' => 'getOptions',
        'features' => 'getFeatures',
        'electronics_f' => 'getElectronicsF',
        'exterior_f' => 'getExteriorF',
        'technical_f' => 'getTechnicalF',
        'standard_f' => 'getStandardF',
        'dealer_added_f' => 'getDealerAddedF',
        'interior_f' => 'getInteriorF',
        'safety_f' => 'getSafetyF',
        'seller_comments' => 'getSellerComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * get Container values
     *
     * @return mixed[]
     */
    public function getContainer()
    {
        return $this->container;
    }
    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    private $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['electronics_f'] = isset($data['electronics_f']) ? $data['electronics_f'] : null;
        $this->container['exterior_f'] = isset($data['exterior_f']) ? $data['exterior_f'] : null;
        $this->container['technical_f'] = isset($data['technical_f']) ? $data['technical_f'] : null;
        $this->container['standard_f'] = isset($data['standard_f']) ? $data['standard_f'] : null;
        $this->container['dealer_added_f'] = isset($data['dealer_added_f']) ? $data['dealer_added_f'] : null;
        $this->container['interior_f'] = isset($data['interior_f']) ? $data['interior_f'] : null;
        $this->container['safety_f'] = isset($data['safety_f']) ? $data['safety_f'] : null;
        $this->container['seller_comments'] = isset($data['seller_comments']) ? $data['seller_comments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier representing a specific listing from the Marketcheck database
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string[] $options Installed Options of the car
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features List of Features available with the car
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets electronics_f
     *
     * @return string[]
     */
    public function getElectronicsF()
    {
        return $this->container['electronics_f'];
    }

    /**
     * Sets electronics_f
     *
     * @param string[] $electronics_f List of electronic features available with the car
     *
     * @return $this
     */
    public function setElectronicsF($electronics_f)
    {
        $this->container['electronics_f'] = $electronics_f;

        return $this;
    }

    /**
     * Gets exterior_f
     *
     * @return string[]
     */
    public function getExteriorF()
    {
        return $this->container['exterior_f'];
    }

    /**
     * Sets exterior_f
     *
     * @param string[] $exterior_f List of exterior features available with the car
     *
     * @return $this
     */
    public function setExteriorF($exterior_f)
    {
        $this->container['exterior_f'] = $exterior_f;

        return $this;
    }

    /**
     * Gets technical_f
     *
     * @return string[]
     */
    public function getTechnicalF()
    {
        return $this->container['technical_f'];
    }

    /**
     * Sets technical_f
     *
     * @param string[] $technical_f List of technical features available with the car
     *
     * @return $this
     */
    public function setTechnicalF($technical_f)
    {
        $this->container['technical_f'] = $technical_f;

        return $this;
    }

    /**
     * Gets standard_f
     *
     * @return string[]
     */
    public function getStandardF()
    {
        return $this->container['standard_f'];
    }

    /**
     * Sets standard_f
     *
     * @param string[] $standard_f List of standard features available with the car
     *
     * @return $this
     */
    public function setStandardF($standard_f)
    {
        $this->container['standard_f'] = $standard_f;

        return $this;
    }

    /**
     * Gets dealer_added_f
     *
     * @return string[]
     */
    public function getDealerAddedF()
    {
        return $this->container['dealer_added_f'];
    }

    /**
     * Sets dealer_added_f
     *
     * @param string[] $dealer_added_f List of dealer added features available with the car
     *
     * @return $this
     */
    public function setDealerAddedF($dealer_added_f)
    {
        $this->container['dealer_added_f'] = $dealer_added_f;

        return $this;
    }

    /**
     * Gets interior_f
     *
     * @return string[]
     */
    public function getInteriorF()
    {
        return $this->container['interior_f'];
    }

    /**
     * Sets interior_f
     *
     * @param string[] $interior_f List of interior features available with the car
     *
     * @return $this
     */
    public function setInteriorF($interior_f)
    {
        $this->container['interior_f'] = $interior_f;

        return $this;
    }

    /**
     * Gets safety_f
     *
     * @return string[]
     */
    public function getSafetyF()
    {
        return $this->container['safety_f'];
    }

    /**
     * Sets safety_f
     *
     * @param string[] $safety_f List of safety features available with the car
     *
     * @return $this
     */
    public function setSafetyF($safety_f)
    {
        $this->container['safety_f'] = $safety_f;

        return $this;
    }

    /**
     * Gets seller_comment
     *
     * @return string
     */
    public function getSellerComments()
    {
        return $this->container['seller_comments'];
    }

    /**
     * Sets seller_comments
     *
     * @param string $seller_comments Seller comment for the car
     *
     * @return $this
     */
    public function setSellerComments($seller_comments)
    {
        $this->container['seller_comments'] = $seller_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


