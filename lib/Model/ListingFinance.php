<?php
/**
 * ListingFinance
 *
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Model;

use \ArrayAccess;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * ListingFinance Class Doc Comment
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingFinance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingFinance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'loan_term' => 'float',
        'loan_apr' => 'float',
        'down_payment' => 'float',
        'down_payment_percentage' => 'float',
        'estimated_monthly_payment' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'loan_term' => null,
        'loan_apr' => null,
        'down_payment' => null,
        'down_payment_percentage' => null,
        'estimated_monthly_payment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_term' => 'loan_term',
        'loan_apr' => 'loan_apr',
        'down_payment' => 'down_payment',
        'down_payment_percentage' => 'down_payment_percentage',
        'estimated_monthly_payment' => 'estimated_monthly_payment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_term' => 'setLoanTerm',
        'loan_apr' => 'setLoanApr',
        'down_payment' => 'setDownPayment',
        'down_payment_percentage' => 'setDownPaymentPercentage',
        'estimated_monthly_payment' => 'setEstimatedMonthlyPayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_term' => 'getLoanTerm',
        'loan_apr' => 'getLoanApr',
        'down_payment' => 'getDownPayment',
        'down_payment_percentage' => 'getDownPaymentPercentage',
        'estimated_monthly_payment' => 'getEstimatedMonthlyPayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loan_term'] = isset($data['loan_term']) ? $data['loan_term'] : null;
        $this->container['loan_apr'] = isset($data['loan_apr']) ? $data['loan_apr'] : null;
        $this->container['down_payment'] = isset($data['down_payment']) ? $data['down_payment'] : null;
        $this->container['down_payment_percentage'] = isset($data['down_payment_percentage']) ? $data['down_payment_percentage'] : null;
        $this->container['estimated_monthly_payment'] = isset($data['estimated_monthly_payment']) ? $data['estimated_monthly_payment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_term
     *
     * @return float
     */
    public function getLoanTerm()
    {
        return $this->container['loan_term'];
    }

    /**
     * Sets loan_term
     *
     * @param float $loan_term Loan term for this finance offer
     *
     * @return $this
     */
    public function setLoanTerm($loan_term)
    {
        $this->container['loan_term'] = $loan_term;

        return $this;
    }

    /**
     * Gets loan_apr
     *
     * @return float
     */
    public function getLoanApr()
    {
        return $this->container['loan_apr'];
    }

    /**
     * Sets loan_apr
     *
     * @param float $loan_apr Loan APR for this finance offer
     *
     * @return $this
     */
    public function setLoanApr($loan_apr)
    {
        $this->container['loan_apr'] = $loan_apr;

        return $this;
    }

    /**
     * Gets down_payment
     *
     * @return float
     */
    public function getDownPayment()
    {
        return $this->container['down_payment'];
    }

    /**
     * Sets down_payment
     *
     * @param float $down_payment Down payment for this finance offer
     *
     * @return $this
     */
    public function setDownPayment($down_payment)
    {
        $this->container['down_payment'] = $down_payment;

        return $this;
    }

    /**
     * Gets down_payment_percentage
     *
     * @return float
     */
    public function getDownPaymentPercentage()
    {
        return $this->container['down_payment_percentage'];
    }

    /**
     * Sets down_payment_percentage
     *
     * @param float $down_payment_percentage down payment percentage for this finance offer
     *
     * @return $this
     */
    public function setDownPaymentPercentage($down_payment_percentage)
    {
        $this->container['down_payment_percentage'] = $down_payment_percentage;

        return $this;
    }

    /**
     * Gets estimated_monthly_payment
     *
     * @return float
     */
    public function getEstimatedMonthlyPayment()
    {
        return $this->container['estimated_monthly_payment'];
    }

    /**
     * Sets estimated_monthly_payment
     *
     * @param float $estimated_monthly_payment estimated monthly payment for this finance offer
     *
     * @return $this
     */
    public function setEstimatedMonthlyPayment($estimated_monthly_payment)
    {
        $this->container['estimated_monthly_payment'] = $estimated_monthly_payment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


