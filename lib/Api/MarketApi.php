<?php
/**
 * MarketApi
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use marketcheck\api\sdk\ApiException;
use marketcheck\api\sdk\Configuration;
use marketcheck\api\sdk\HeaderSelector;
use marketcheck\api\sdk\ObjectSerializer;

/**
 * MarketApi Class Doc Comment
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getMDS
     *
     * Market Days Supply
     *
     * @param  string $vin VIN to decode (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $exact Exact parameter (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $debug Debug parameter (optional)
     * @param  string $include_sold To fetch sold vins (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \marketcheck\api\sdk\Model\Mds
     */
    public function getMDS($vin, $api_key = null, $exact = null, $latitude = null, $longitude = null, $radius = null, $debug = null, $include_sold = null)
    {
        list($response) = $this->getMDSWithHttpInfo($vin, $api_key, $exact, $latitude, $longitude, $radius, $debug, $include_sold);
        return $response;
    }

    /**
     * Operation getMDSWithHttpInfo
     *
     * Market Days Supply
     *
     * @param  string $vin VIN to decode (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $exact Exact parameter (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $debug Debug parameter (optional)
     * @param  string $include_sold To fetch sold vins (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \marketcheck\api\sdk\Model\Mds, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMDSWithHttpInfo($vin, $api_key = null, $exact = null, $latitude = null, $longitude = null, $radius = null, $debug = null, $include_sold = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\Mds';
        $request = $this->getMDSRequest($vin, $api_key, $exact, $latitude, $longitude, $radius, $debug, $include_sold);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Mds',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMDSAsync
     *
     * Market Days Supply
     *
     * @param  string $vin VIN to decode (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $exact Exact parameter (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $debug Debug parameter (optional)
     * @param  string $include_sold To fetch sold vins (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMDSAsync($vin, $api_key = null, $exact = null, $latitude = null, $longitude = null, $radius = null, $debug = null, $include_sold = null)
    {
        return $this->getMDSAsyncWithHttpInfo($vin, $api_key, $exact, $latitude, $longitude, $radius, $debug, $include_sold)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMDSAsyncWithHttpInfo
     *
     * Market Days Supply
     *
     * @param  string $vin VIN to decode (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $exact Exact parameter (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $debug Debug parameter (optional)
     * @param  string $include_sold To fetch sold vins (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMDSAsyncWithHttpInfo($vin, $api_key = null, $exact = null, $latitude = null, $longitude = null, $radius = null, $debug = null, $include_sold = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\Mds';
        $request = $this->getMDSRequest($vin, $api_key, $exact, $latitude, $longitude, $radius, $debug, $include_sold);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMDS'
     *
     * @param  string $vin VIN to decode (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $exact Exact parameter (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $debug Debug parameter (optional)
     * @param  string $include_sold To fetch sold vins (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMDSRequest($vin, $api_key = null, $exact = null, $latitude = null, $longitude = null, $radius = null, $debug = null, $include_sold = null)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling getMDS'
            );
        }

        $resourcePath = '/mds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($vin !== null) {
            $queryParams['vin'] = ObjectSerializer::toQueryValue($vin);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = ObjectSerializer::toQueryValue($exact);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = ObjectSerializer::toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = ObjectSerializer::toQueryValue($longitude);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = ObjectSerializer::toQueryValue($radius);
        }
        // query params
        if ($debug !== null) {
            $queryParams['debug'] = ObjectSerializer::toQueryValue($debug);
        }
        // query params
        if ($include_sold !== null) {
            $queryParams['include_sold'] = ObjectSerializer::toQueryValue($include_sold);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPopularity
     *
     * Popularity
     *
     * @param  string $year Year of the car (required)
     * @param  string $make Make of the car (required)
     * @param  string $model Model of the Car (required)
     * @param  string $trim Trim of the Car (required)
     * @param  string $body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \marketcheck\api\sdk\Model\PopularityItem[]
     */
    public function getPopularity($year, $make, $model, $trim, $body_type, $api_key = null, $stats = null)
    {
        list($response) = $this->getPopularityWithHttpInfo($year, $make, $model, $trim, $body_type, $api_key, $stats);
        return $response;
    }

    /**
     * Operation getPopularityWithHttpInfo
     *
     * Popularity
     *
     * @param  string $year Year of the car (required)
     * @param  string $make Make of the car (required)
     * @param  string $model Model of the Car (required)
     * @param  string $trim Trim of the Car (required)
     * @param  string $body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \marketcheck\api\sdk\Model\PopularityItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPopularityWithHttpInfo($year, $make, $model, $trim, $body_type, $api_key = null, $stats = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\PopularityItem[]';
        $request = $this->getPopularityRequest($year, $make, $model, $trim, $body_type, $api_key, $stats);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\PopularityItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPopularityAsync
     *
     * Popularity
     *
     * @param  string $year Year of the car (required)
     * @param  string $make Make of the car (required)
     * @param  string $model Model of the Car (required)
     * @param  string $trim Trim of the Car (required)
     * @param  string $body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPopularityAsync($year, $make, $model, $trim, $body_type, $api_key = null, $stats = null)
    {
        return $this->getPopularityAsyncWithHttpInfo($year, $make, $model, $trim, $body_type, $api_key, $stats)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPopularityAsyncWithHttpInfo
     *
     * Popularity
     *
     * @param  string $year Year of the car (required)
     * @param  string $make Make of the car (required)
     * @param  string $model Model of the Car (required)
     * @param  string $trim Trim of the Car (required)
     * @param  string $body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPopularityAsyncWithHttpInfo($year, $make, $model, $trim, $body_type, $api_key = null, $stats = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\PopularityItem[]';
        $request = $this->getPopularityRequest($year, $make, $model, $trim, $body_type, $api_key, $stats);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPopularity'
     *
     * @param  string $year Year of the car (required)
     * @param  string $make Make of the car (required)
     * @param  string $model Model of the Car (required)
     * @param  string $trim Trim of the Car (required)
     * @param  string $body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPopularityRequest($year, $make, $model, $trim, $body_type, $api_key = null, $stats = null)
    {
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getPopularity'
            );
        }
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling getPopularity'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling getPopularity'
            );
        }
        // verify the required parameter 'trim' is set
        if ($trim === null || (is_array($trim) && count($trim) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trim when calling getPopularity'
            );
        }
        // verify the required parameter 'body_type' is set
        if ($body_type === null || (is_array($body_type) && count($body_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body_type when calling getPopularity'
            );
        }

        $resourcePath = '/popularity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($trim !== null) {
            $queryParams['trim'] = ObjectSerializer::toQueryValue($trim);
        }
        // query params
        if ($body_type !== null) {
            $queryParams['body_type'] = ObjectSerializer::toQueryValue($body_type);
        }
        // query params
        if ($stats !== null) {
            $queryParams['stats'] = ObjectSerializer::toQueryValue($stats);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
