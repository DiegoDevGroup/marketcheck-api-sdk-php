<?php
/**
 * ListingsApi
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace marketcheck\api\sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use marketcheck\api\sdk\ApiException;
use marketcheck\api\sdk\Configuration;
use marketcheck\api\sdk\HeaderSelector;
use marketcheck\api\sdk\ObjectSerializer;

/**
 * ListingsApi Class Doc Comment
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getListing
     *
     * Listing by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \marketcheck\api\sdk\Model\Listing
     */
    public function getListing($id, $api_key = null)
    {
        list($response) = $this->getListingWithHttpInfo($id, $api_key);
        return $response;
    }

    /**
     * Operation getListingWithHttpInfo
     *
     * Listing by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \marketcheck\api\sdk\Model\Listing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingWithHttpInfo($id, $api_key = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\Listing';
        $request = $this->getListingRequest($id, $api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Listing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingAsync
     *
     * Listing by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingAsync($id, $api_key = null)
    {
        return $this->getListingAsyncWithHttpInfo($id, $api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingAsyncWithHttpInfo
     *
     * Listing by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingAsyncWithHttpInfo($id, $api_key = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\Listing';
        $request = $this->getListingRequest($id, $api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListing'
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingRequest($id, $api_key = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getListing'
            );
        }

        $resourcePath = '/listing/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingExtra
     *
     * Long text Listings attributes for Listing with the given id
     *
     * @param  string $id Listing id to get all the long text listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \marketcheck\api\sdk\Model\ListingExtraAttributes
     */
    public function getListingExtra($id, $api_key = null)
    {
        list($response) = $this->getListingExtraWithHttpInfo($id, $api_key);
        return $response;
    }

    /**
     * Operation getListingExtraWithHttpInfo
     *
     * Long text Listings attributes for Listing with the given id
     *
     * @param  string $id Listing id to get all the long text listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \marketcheck\api\sdk\Model\ListingExtraAttributes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingExtraWithHttpInfo($id, $api_key = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\ListingExtraAttributes';
        $request = $this->getListingExtraRequest($id, $api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\ListingExtraAttributes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingExtraAsync
     *
     * Long text Listings attributes for Listing with the given id
     *
     * @param  string $id Listing id to get all the long text listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingExtraAsync($id, $api_key = null)
    {
        return $this->getListingExtraAsyncWithHttpInfo($id, $api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingExtraAsyncWithHttpInfo
     *
     * Long text Listings attributes for Listing with the given id
     *
     * @param  string $id Listing id to get all the long text listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingExtraAsyncWithHttpInfo($id, $api_key = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\ListingExtraAttributes';
        $request = $this->getListingExtraRequest($id, $api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingExtra'
     *
     * @param  string $id Listing id to get all the long text listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingExtraRequest($id, $api_key = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getListingExtra'
            );
        }

        $resourcePath = '/listing/{id}/extra';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingMedia
     *
     * Listing media by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \marketcheck\api\sdk\Model\ListingMedia
     */
    public function getListingMedia($id, $api_key = null)
    {
        list($response) = $this->getListingMediaWithHttpInfo($id, $api_key);
        return $response;
    }

    /**
     * Operation getListingMediaWithHttpInfo
     *
     * Listing media by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \marketcheck\api\sdk\Model\ListingMedia, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingMediaWithHttpInfo($id, $api_key = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\ListingMedia';
        $request = $this->getListingMediaRequest($id, $api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\ListingMedia',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingMediaAsync
     *
     * Listing media by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingMediaAsync($id, $api_key = null)
    {
        return $this->getListingMediaAsyncWithHttpInfo($id, $api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingMediaAsyncWithHttpInfo
     *
     * Listing media by id
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingMediaAsyncWithHttpInfo($id, $api_key = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\ListingMedia';
        $request = $this->getListingMediaRequest($id, $api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingMedia'
     *
     * @param  string $id Listing id to get all the listing attributes (required)
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingMediaRequest($id, $api_key = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getListingMedia'
            );
        }

        $resourcePath = '/listing/{id}/media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation search
     *
     * Gets active car listings for the given search criteria
     *
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $zip car search bases on zipcode (optional)
     * @param  bool $include_lease Boolean param to search for listings that include leasing options in them (optional)
     * @param  bool $include_finance Boolean param to search for listings that include finance options in them (optional)
     * @param  string $lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param  string $lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param  string $lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param  string $finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param  string $finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param  string $finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param  string $finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param  string $finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param  string $car_type Car type. Allowed values are - new / used / certified (optional)
     * @param  string $seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     * @param  string $carfax_1_owner Indicates whether car has had only one owner or not (optional)
     * @param  string $carfax_clean_title Indicates whether car has clean ownership records (optional)
     * @param  string $year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     * @param  string $make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     * @param  string $model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     * @param  string $trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     * @param  string $dealer_id Dealer id to filter the cars. (optional)
     * @param  string $vin Car vin to search (optional)
     * @param  string $source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     * @param  string $body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     * @param  string $body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param  string $vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     * @param  string $vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param  string $taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param  string $ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param  string $match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param  string $cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     * @param  string $transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     * @param  string $speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     * @param  string $doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param  string $drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     * @param  string $exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param  string $interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param  string $engine Filter listings on engine (optional)
     * @param  string $engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     * @param  string $engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param  string $engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param  string $miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     * @param  string $sort_order Sort order - asc or desc. Default sort order is distance from a point. (optional)
     * @param  string $rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param  string $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param  string $facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param  string $country Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     * @param  string $plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param  bool $nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param  string $state Filter listsings on State (optional)
     * @param  string $city Filter listings on city (optional)
     * @param  string $dealer_name Filter listings on dealer_name (optional)
     * @param  string $trim_o Filter listings on web scraped trim (optional)
     * @param  string $trim_r Filter trim on custom possible matches (optional)
     * @param  string $dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $options Tokenizer search on options for multiple options use | as seperator (optional)
     * @param  string $features Tokenizer search on features for multiple options use | as seperator (optional)
     * @param  bool $exclude_certified Boolean param to exclude certified cars from search results (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \marketcheck\api\sdk\Model\SearchResponse
     */
    public function search($api_key = null, $latitude = null, $longitude = null, $radius = null, $zip = null, $include_lease = null, $include_finance = null, $lease_term = null, $lease_down_payment = null, $lease_emp = null, $finance_loan_term = null, $finance_loan_apr = null, $finance_emp = null, $finance_down_payment = null, $finance_down_payment_per = null, $car_type = null, $seller_type = null, $carfax_1_owner = null, $carfax_clean_title = null, $year = null, $make = null, $model = null, $trim = null, $dealer_id = null, $vin = null, $source = null, $body_type = null, $body_subtype = null, $vehicle_type = null, $vins = null, $taxonomy_vins = null, $ymmt = null, $match = null, $cylinders = null, $transmission = null, $speeds = null, $doors = null, $drivetrain = null, $exterior_color = null, $interior_color = null, $engine = null, $engine_type = null, $engine_aspiration = null, $engine_block = null, $miles_range = null, $price_range = null, $dom_range = null, $sort_by = null, $sort_order = null, $rows = null, $start = null, $facets = null, $stats = null, $country = null, $plot = null, $nodedup = null, $state = null, $city = null, $dealer_name = null, $trim_o = null, $trim_r = null, $dom_active_range = null, $dom_180_range = null, $options = null, $features = null, $exclude_certified = null)
    {
        list($response) = $this->searchWithHttpInfo($api_key, $latitude, $longitude, $radius, $zip, $include_lease, $include_finance, $lease_term, $lease_down_payment, $lease_emp, $finance_loan_term, $finance_loan_apr, $finance_emp, $finance_down_payment, $finance_down_payment_per, $car_type, $seller_type, $carfax_1_owner, $carfax_clean_title, $year, $make, $model, $trim, $dealer_id, $vin, $source, $body_type, $body_subtype, $vehicle_type, $vins, $taxonomy_vins, $ymmt, $match, $cylinders, $transmission, $speeds, $doors, $drivetrain, $exterior_color, $interior_color, $engine, $engine_type, $engine_aspiration, $engine_block, $miles_range, $price_range, $dom_range, $sort_by, $sort_order, $rows, $start, $facets, $stats, $country, $plot, $nodedup, $state, $city, $dealer_name, $trim_o, $trim_r, $dom_active_range, $dom_180_range, $options, $features, $exclude_certified);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * Gets active car listings for the given search criteria
     *
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $zip car search bases on zipcode (optional)
     * @param  bool $include_lease Boolean param to search for listings that include leasing options in them (optional)
     * @param  bool $include_finance Boolean param to search for listings that include finance options in them (optional)
     * @param  string $lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param  string $lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param  string $lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param  string $finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param  string $finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param  string $finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param  string $finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param  string $finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param  string $car_type Car type. Allowed values are - new / used / certified (optional)
     * @param  string $seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     * @param  string $carfax_1_owner Indicates whether car has had only one owner or not (optional)
     * @param  string $carfax_clean_title Indicates whether car has clean ownership records (optional)
     * @param  string $year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     * @param  string $make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     * @param  string $model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     * @param  string $trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     * @param  string $dealer_id Dealer id to filter the cars. (optional)
     * @param  string $vin Car vin to search (optional)
     * @param  string $source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     * @param  string $body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     * @param  string $body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param  string $vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     * @param  string $vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param  string $taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param  string $ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param  string $match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param  string $cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     * @param  string $transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     * @param  string $speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     * @param  string $doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param  string $drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     * @param  string $exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param  string $interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param  string $engine Filter listings on engine (optional)
     * @param  string $engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     * @param  string $engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param  string $engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param  string $miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     * @param  string $sort_order Sort order - asc or desc. Default sort order is distance from a point. (optional)
     * @param  string $rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param  string $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param  string $facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param  string $country Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     * @param  string $plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param  bool $nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param  string $state Filter listsings on State (optional)
     * @param  string $city Filter listings on city (optional)
     * @param  string $dealer_name Filter listings on dealer_name (optional)
     * @param  string $trim_o Filter listings on web scraped trim (optional)
     * @param  string $trim_r Filter trim on custom possible matches (optional)
     * @param  string $dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $options Tokenizer search on options for multiple options use | as seperator (optional)
     * @param  string $features Tokenizer search on features for multiple options use | as seperator (optional)
     * @param  bool $exclude_certified Boolean param to exclude certified cars from search results (optional)
     *
     * @throws \marketcheck\api\sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \marketcheck\api\sdk\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($api_key = null, $latitude = null, $longitude = null, $radius = null, $zip = null, $include_lease = null, $include_finance = null, $lease_term = null, $lease_down_payment = null, $lease_emp = null, $finance_loan_term = null, $finance_loan_apr = null, $finance_emp = null, $finance_down_payment = null, $finance_down_payment_per = null, $car_type = null, $seller_type = null, $carfax_1_owner = null, $carfax_clean_title = null, $year = null, $make = null, $model = null, $trim = null, $dealer_id = null, $vin = null, $source = null, $body_type = null, $body_subtype = null, $vehicle_type = null, $vins = null, $taxonomy_vins = null, $ymmt = null, $match = null, $cylinders = null, $transmission = null, $speeds = null, $doors = null, $drivetrain = null, $exterior_color = null, $interior_color = null, $engine = null, $engine_type = null, $engine_aspiration = null, $engine_block = null, $miles_range = null, $price_range = null, $dom_range = null, $sort_by = null, $sort_order = null, $rows = null, $start = null, $facets = null, $stats = null, $country = null, $plot = null, $nodedup = null, $state = null, $city = null, $dealer_name = null, $trim_o = null, $trim_r = null, $dom_active_range = null, $dom_180_range = null, $options = null, $features = null, $exclude_certified = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\SearchResponse';
        $request = $this->searchRequest($api_key, $latitude, $longitude, $radius, $zip, $include_lease, $include_finance, $lease_term, $lease_down_payment, $lease_emp, $finance_loan_term, $finance_loan_apr, $finance_emp, $finance_down_payment, $finance_down_payment_per, $car_type, $seller_type, $carfax_1_owner, $carfax_clean_title, $year, $make, $model, $trim, $dealer_id, $vin, $source, $body_type, $body_subtype, $vehicle_type, $vins, $taxonomy_vins, $ymmt, $match, $cylinders, $transmission, $speeds, $doors, $drivetrain, $exterior_color, $interior_color, $engine, $engine_type, $engine_aspiration, $engine_block, $miles_range, $price_range, $dom_range, $sort_by, $sort_order, $rows, $start, $facets, $stats, $country, $plot, $nodedup, $state, $city, $dealer_name, $trim_o, $trim_r, $dom_active_range, $dom_180_range, $options, $features, $exclude_certified);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\SearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\marketcheck\api\sdk\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * Gets active car listings for the given search criteria
     *
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $zip car search bases on zipcode (optional)
     * @param  bool $include_lease Boolean param to search for listings that include leasing options in them (optional)
     * @param  bool $include_finance Boolean param to search for listings that include finance options in them (optional)
     * @param  string $lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param  string $lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param  string $lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param  string $finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param  string $finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param  string $finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param  string $finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param  string $finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param  string $car_type Car type. Allowed values are - new / used / certified (optional)
     * @param  string $seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     * @param  string $carfax_1_owner Indicates whether car has had only one owner or not (optional)
     * @param  string $carfax_clean_title Indicates whether car has clean ownership records (optional)
     * @param  string $year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     * @param  string $make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     * @param  string $model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     * @param  string $trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     * @param  string $dealer_id Dealer id to filter the cars. (optional)
     * @param  string $vin Car vin to search (optional)
     * @param  string $source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     * @param  string $body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     * @param  string $body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param  string $vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     * @param  string $vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param  string $taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param  string $ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param  string $match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param  string $cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     * @param  string $transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     * @param  string $speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     * @param  string $doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param  string $drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     * @param  string $exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param  string $interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param  string $engine Filter listings on engine (optional)
     * @param  string $engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     * @param  string $engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param  string $engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param  string $miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     * @param  string $sort_order Sort order - asc or desc. Default sort order is distance from a point. (optional)
     * @param  string $rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param  string $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param  string $facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param  string $country Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     * @param  string $plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param  bool $nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param  string $state Filter listsings on State (optional)
     * @param  string $city Filter listings on city (optional)
     * @param  string $dealer_name Filter listings on dealer_name (optional)
     * @param  string $trim_o Filter listings on web scraped trim (optional)
     * @param  string $trim_r Filter trim on custom possible matches (optional)
     * @param  string $dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $options Tokenizer search on options for multiple options use | as seperator (optional)
     * @param  string $features Tokenizer search on features for multiple options use | as seperator (optional)
     * @param  bool $exclude_certified Boolean param to exclude certified cars from search results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($api_key = null, $latitude = null, $longitude = null, $radius = null, $zip = null, $include_lease = null, $include_finance = null, $lease_term = null, $lease_down_payment = null, $lease_emp = null, $finance_loan_term = null, $finance_loan_apr = null, $finance_emp = null, $finance_down_payment = null, $finance_down_payment_per = null, $car_type = null, $seller_type = null, $carfax_1_owner = null, $carfax_clean_title = null, $year = null, $make = null, $model = null, $trim = null, $dealer_id = null, $vin = null, $source = null, $body_type = null, $body_subtype = null, $vehicle_type = null, $vins = null, $taxonomy_vins = null, $ymmt = null, $match = null, $cylinders = null, $transmission = null, $speeds = null, $doors = null, $drivetrain = null, $exterior_color = null, $interior_color = null, $engine = null, $engine_type = null, $engine_aspiration = null, $engine_block = null, $miles_range = null, $price_range = null, $dom_range = null, $sort_by = null, $sort_order = null, $rows = null, $start = null, $facets = null, $stats = null, $country = null, $plot = null, $nodedup = null, $state = null, $city = null, $dealer_name = null, $trim_o = null, $trim_r = null, $dom_active_range = null, $dom_180_range = null, $options = null, $features = null, $exclude_certified = null)
    {
        return $this->searchAsyncWithHttpInfo($api_key, $latitude, $longitude, $radius, $zip, $include_lease, $include_finance, $lease_term, $lease_down_payment, $lease_emp, $finance_loan_term, $finance_loan_apr, $finance_emp, $finance_down_payment, $finance_down_payment_per, $car_type, $seller_type, $carfax_1_owner, $carfax_clean_title, $year, $make, $model, $trim, $dealer_id, $vin, $source, $body_type, $body_subtype, $vehicle_type, $vins, $taxonomy_vins, $ymmt, $match, $cylinders, $transmission, $speeds, $doors, $drivetrain, $exterior_color, $interior_color, $engine, $engine_type, $engine_aspiration, $engine_block, $miles_range, $price_range, $dom_range, $sort_by, $sort_order, $rows, $start, $facets, $stats, $country, $plot, $nodedup, $state, $city, $dealer_name, $trim_o, $trim_r, $dom_active_range, $dom_180_range, $options, $features, $exclude_certified)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * Gets active car listings for the given search criteria
     *
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $zip car search bases on zipcode (optional)
     * @param  bool $include_lease Boolean param to search for listings that include leasing options in them (optional)
     * @param  bool $include_finance Boolean param to search for listings that include finance options in them (optional)
     * @param  string $lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param  string $lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param  string $lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param  string $finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param  string $finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param  string $finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param  string $finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param  string $finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param  string $car_type Car type. Allowed values are - new / used / certified (optional)
     * @param  string $seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     * @param  string $carfax_1_owner Indicates whether car has had only one owner or not (optional)
     * @param  string $carfax_clean_title Indicates whether car has clean ownership records (optional)
     * @param  string $year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     * @param  string $make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     * @param  string $model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     * @param  string $trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     * @param  string $dealer_id Dealer id to filter the cars. (optional)
     * @param  string $vin Car vin to search (optional)
     * @param  string $source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     * @param  string $body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     * @param  string $body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param  string $vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     * @param  string $vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param  string $taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param  string $ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param  string $match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param  string $cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     * @param  string $transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     * @param  string $speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     * @param  string $doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param  string $drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     * @param  string $exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param  string $interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param  string $engine Filter listings on engine (optional)
     * @param  string $engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     * @param  string $engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param  string $engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param  string $miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     * @param  string $sort_order Sort order - asc or desc. Default sort order is distance from a point. (optional)
     * @param  string $rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param  string $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param  string $facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param  string $country Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     * @param  string $plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param  bool $nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param  string $state Filter listsings on State (optional)
     * @param  string $city Filter listings on city (optional)
     * @param  string $dealer_name Filter listings on dealer_name (optional)
     * @param  string $trim_o Filter listings on web scraped trim (optional)
     * @param  string $trim_r Filter trim on custom possible matches (optional)
     * @param  string $dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $options Tokenizer search on options for multiple options use | as seperator (optional)
     * @param  string $features Tokenizer search on features for multiple options use | as seperator (optional)
     * @param  bool $exclude_certified Boolean param to exclude certified cars from search results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($api_key = null, $latitude = null, $longitude = null, $radius = null, $zip = null, $include_lease = null, $include_finance = null, $lease_term = null, $lease_down_payment = null, $lease_emp = null, $finance_loan_term = null, $finance_loan_apr = null, $finance_emp = null, $finance_down_payment = null, $finance_down_payment_per = null, $car_type = null, $seller_type = null, $carfax_1_owner = null, $carfax_clean_title = null, $year = null, $make = null, $model = null, $trim = null, $dealer_id = null, $vin = null, $source = null, $body_type = null, $body_subtype = null, $vehicle_type = null, $vins = null, $taxonomy_vins = null, $ymmt = null, $match = null, $cylinders = null, $transmission = null, $speeds = null, $doors = null, $drivetrain = null, $exterior_color = null, $interior_color = null, $engine = null, $engine_type = null, $engine_aspiration = null, $engine_block = null, $miles_range = null, $price_range = null, $dom_range = null, $sort_by = null, $sort_order = null, $rows = null, $start = null, $facets = null, $stats = null, $country = null, $plot = null, $nodedup = null, $state = null, $city = null, $dealer_name = null, $trim_o = null, $trim_r = null, $dom_active_range = null, $dom_180_range = null, $options = null, $features = null, $exclude_certified = null)
    {
        $returnType = '\marketcheck\api\sdk\Model\SearchResponse';
        $request = $this->searchRequest($api_key, $latitude, $longitude, $radius, $zip, $include_lease, $include_finance, $lease_term, $lease_down_payment, $lease_emp, $finance_loan_term, $finance_loan_apr, $finance_emp, $finance_down_payment, $finance_down_payment_per, $car_type, $seller_type, $carfax_1_owner, $carfax_clean_title, $year, $make, $model, $trim, $dealer_id, $vin, $source, $body_type, $body_subtype, $vehicle_type, $vins, $taxonomy_vins, $ymmt, $match, $cylinders, $transmission, $speeds, $doors, $drivetrain, $exterior_color, $interior_color, $engine, $engine_type, $engine_aspiration, $engine_block, $miles_range, $price_range, $dom_range, $sort_by, $sort_order, $rows, $start, $facets, $stats, $country, $plot, $nodedup, $state, $city, $dealer_name, $trim_o, $trim_r, $dom_active_range, $dom_180_range, $options, $features, $exclude_certified);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
     * @param  double $latitude Latitude component of location (optional)
     * @param  double $longitude Longitude component of location (optional)
     * @param  int $radius Radius around the search location (optional)
     * @param  string $zip car search bases on zipcode (optional)
     * @param  bool $include_lease Boolean param to search for listings that include leasing options in them (optional)
     * @param  bool $include_finance Boolean param to search for listings that include finance options in them (optional)
     * @param  string $lease_term Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term&#x3D;30-60 (optional)
     * @param  string $lease_down_payment Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment&#x3D;30-60 (optional)
     * @param  string $lease_emp Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp&#x3D;30-60 (optional)
     * @param  string $finance_loan_term Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term&#x3D;30-60 (optional)
     * @param  string $finance_loan_apr Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr&#x3D;30-60 (optional)
     * @param  string $finance_emp Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp&#x3D;30-60 (optional)
     * @param  string $finance_down_payment Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment&#x3D;30-60 (optional)
     * @param  string $finance_down_payment_per Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per&#x3D;30-60 (optional)
     * @param  string $car_type Car type. Allowed values are - new / used / certified (optional)
     * @param  string $seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
     * @param  string $carfax_1_owner Indicates whether car has had only one owner or not (optional)
     * @param  string $carfax_clean_title Indicates whether car has clean ownership records (optional)
     * @param  string $year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
     * @param  string $make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
     * @param  string $model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
     * @param  string $trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
     * @param  string $dealer_id Dealer id to filter the cars. (optional)
     * @param  string $vin Car vin to search (optional)
     * @param  string $source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
     * @param  string $body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
     * @param  string $body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
     * @param  string $vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
     * @param  string $vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
     * @param  string $taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
     * @param  string $ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
     * @param  string $match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
     * @param  string $cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
     * @param  string $transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
     * @param  string $speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
     * @param  string $doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
     * @param  string $drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
     * @param  string $exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
     * @param  string $interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
     * @param  string $engine Filter listings on engine (optional)
     * @param  string $engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
     * @param  string $engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
     * @param  string $engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
     * @param  string $miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
     * @param  string $dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
     * @param  string $sort_order Sort order - asc or desc. Default sort order is distance from a point. (optional)
     * @param  string $rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param  string $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param  string $facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
     * @param  string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param  string $country Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
     * @param  string $plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
     * @param  bool $nodedup If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin (optional)
     * @param  string $state Filter listsings on State (optional)
     * @param  string $city Filter listings on city (optional)
     * @param  string $dealer_name Filter listings on dealer_name (optional)
     * @param  string $trim_o Filter listings on web scraped trim (optional)
     * @param  string $trim_r Filter trim on custom possible matches (optional)
     * @param  string $dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
     * @param  string $options Tokenizer search on options for multiple options use | as seperator (optional)
     * @param  string $features Tokenizer search on features for multiple options use | as seperator (optional)
     * @param  bool $exclude_certified Boolean param to exclude certified cars from search results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchRequest($api_key = null, $latitude = null, $longitude = null, $radius = null, $zip = null, $include_lease = null, $include_finance = null, $lease_term = null, $lease_down_payment = null, $lease_emp = null, $finance_loan_term = null, $finance_loan_apr = null, $finance_emp = null, $finance_down_payment = null, $finance_down_payment_per = null, $car_type = null, $seller_type = null, $carfax_1_owner = null, $carfax_clean_title = null, $year = null, $make = null, $model = null, $trim = null, $dealer_id = null, $vin = null, $source = null, $body_type = null, $body_subtype = null, $vehicle_type = null, $vins = null, $taxonomy_vins = null, $ymmt = null, $match = null, $cylinders = null, $transmission = null, $speeds = null, $doors = null, $drivetrain = null, $exterior_color = null, $interior_color = null, $engine = null, $engine_type = null, $engine_aspiration = null, $engine_block = null, $miles_range = null, $price_range = null, $dom_range = null, $sort_by = null, $sort_order = null, $rows = null, $start = null, $facets = null, $stats = null, $country = null, $plot = null, $nodedup = null, $state = null, $city = null, $dealer_name = null, $trim_o = null, $trim_r = null, $dom_active_range = null, $dom_180_range = null, $options = null, $features = null, $exclude_certified = null)
    {

        $resourcePath = '/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['api_key'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = ObjectSerializer::toQueryValue($latitude);
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = ObjectSerializer::toQueryValue($longitude);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = ObjectSerializer::toQueryValue($radius);
        }
        // query params
        if ($zip !== null) {
            $queryParams['zip'] = ObjectSerializer::toQueryValue($zip);
        }
        // query params
        if ($include_lease !== null) {
            $queryParams['include_lease'] = ObjectSerializer::toQueryValue($include_lease);
        }
        // query params
        if ($include_finance !== null) {
            $queryParams['include_finance'] = ObjectSerializer::toQueryValue($include_finance);
        }
        // query params
        if ($lease_term !== null) {
            $queryParams['lease_term'] = ObjectSerializer::toQueryValue($lease_term);
        }
        // query params
        if ($lease_down_payment !== null) {
            $queryParams['lease_down_payment'] = ObjectSerializer::toQueryValue($lease_down_payment);
        }
        // query params
        if ($lease_emp !== null) {
            $queryParams['lease_emp'] = ObjectSerializer::toQueryValue($lease_emp);
        }
        // query params
        if ($finance_loan_term !== null) {
            $queryParams['finance_loan_term'] = ObjectSerializer::toQueryValue($finance_loan_term);
        }
        // query params
        if ($finance_loan_apr !== null) {
            $queryParams['finance_loan_apr'] = ObjectSerializer::toQueryValue($finance_loan_apr);
        }
        // query params
        if ($finance_emp !== null) {
            $queryParams['finance_emp'] = ObjectSerializer::toQueryValue($finance_emp);
        }
        // query params
        if ($finance_down_payment !== null) {
            $queryParams['finance_down_payment'] = ObjectSerializer::toQueryValue($finance_down_payment);
        }
        // query params
        if ($finance_down_payment_per !== null) {
            $queryParams['finance_down_payment_per'] = ObjectSerializer::toQueryValue($finance_down_payment_per);
        }
        // query params
        if ($car_type !== null) {
            $queryParams['car_type'] = ObjectSerializer::toQueryValue($car_type);
        }
        // query params
        if ($seller_type !== null) {
            $queryParams['seller_type'] = ObjectSerializer::toQueryValue($seller_type);
        }
        // query params
        if ($carfax_1_owner !== null) {
            $queryParams['carfax_1_owner'] = ObjectSerializer::toQueryValue($carfax_1_owner);
        }
        // query params
        if ($carfax_clean_title !== null) {
            $queryParams['carfax_clean_title'] = ObjectSerializer::toQueryValue($carfax_clean_title);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($trim !== null) {
            $queryParams['trim'] = ObjectSerializer::toQueryValue($trim);
        }
        // query params
        if ($dealer_id !== null) {
            $queryParams['dealer_id'] = ObjectSerializer::toQueryValue($dealer_id);
        }
        // query params
        if ($vin !== null) {
            $queryParams['vin'] = ObjectSerializer::toQueryValue($vin);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($body_type !== null) {
            $queryParams['body_type'] = ObjectSerializer::toQueryValue($body_type);
        }
        // query params
        if ($body_subtype !== null) {
            $queryParams['body_subtype'] = ObjectSerializer::toQueryValue($body_subtype);
        }
        // query params
        if ($vehicle_type !== null) {
            $queryParams['vehicle_type'] = ObjectSerializer::toQueryValue($vehicle_type);
        }
        // query params
        if ($vins !== null) {
            $queryParams['vins'] = ObjectSerializer::toQueryValue($vins);
        }
        // query params
        if ($taxonomy_vins !== null) {
            $queryParams['taxonomy_vins'] = ObjectSerializer::toQueryValue($taxonomy_vins);
        }
        // query params
        if ($ymmt !== null) {
            $queryParams['ymmt'] = ObjectSerializer::toQueryValue($ymmt);
        }
        // query params
        if ($match !== null) {
            $queryParams['match'] = ObjectSerializer::toQueryValue($match);
        }
        // query params
        if ($cylinders !== null) {
            $queryParams['cylinders'] = ObjectSerializer::toQueryValue($cylinders);
        }
        // query params
        if ($transmission !== null) {
            $queryParams['transmission'] = ObjectSerializer::toQueryValue($transmission);
        }
        // query params
        if ($speeds !== null) {
            $queryParams['speeds'] = ObjectSerializer::toQueryValue($speeds);
        }
        // query params
        if ($doors !== null) {
            $queryParams['doors'] = ObjectSerializer::toQueryValue($doors);
        }
        // query params
        if ($drivetrain !== null) {
            $queryParams['drivetrain'] = ObjectSerializer::toQueryValue($drivetrain);
        }
        // query params
        if ($exterior_color !== null) {
            $queryParams['exterior_color'] = ObjectSerializer::toQueryValue($exterior_color);
        }
        // query params
        if ($interior_color !== null) {
            $queryParams['interior_color'] = ObjectSerializer::toQueryValue($interior_color);
        }
        // query params
        if ($engine !== null) {
            $queryParams['engine'] = ObjectSerializer::toQueryValue($engine);
        }
        // query params
        if ($engine_type !== null) {
            $queryParams['engine_type'] = ObjectSerializer::toQueryValue($engine_type);
        }
        // query params
        if ($engine_aspiration !== null) {
            $queryParams['engine_aspiration'] = ObjectSerializer::toQueryValue($engine_aspiration);
        }
        // query params
        if ($engine_block !== null) {
            $queryParams['engine_block'] = ObjectSerializer::toQueryValue($engine_block);
        }
        // query params
        if ($miles_range !== null) {
            $queryParams['miles_range'] = ObjectSerializer::toQueryValue($miles_range);
        }
        // query params
        if ($price_range !== null) {
            $queryParams['price_range'] = ObjectSerializer::toQueryValue($price_range);
        }
        // query params
        if ($dom_range !== null) {
            $queryParams['dom_range'] = ObjectSerializer::toQueryValue($dom_range);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = ObjectSerializer::toQueryValue($sort_by);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sort_order'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // query params
        if ($rows !== null) {
            $queryParams['rows'] = ObjectSerializer::toQueryValue($rows);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($facets !== null) {
            $queryParams['facets'] = ObjectSerializer::toQueryValue($facets);
        }
        // query params
        if ($stats !== null) {
            $queryParams['stats'] = ObjectSerializer::toQueryValue($stats);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($plot !== null) {
            $queryParams['plot'] = ObjectSerializer::toQueryValue($plot);
        }
        // query params
        if ($nodedup !== null) {
            $queryParams['nodedup'] = ObjectSerializer::toQueryValue($nodedup);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city);
        }
        // query params
        if ($dealer_name !== null) {
            $queryParams['dealer_name'] = ObjectSerializer::toQueryValue($dealer_name);
        }
        // query params
        if ($trim_o !== null) {
            $queryParams['trim_o'] = ObjectSerializer::toQueryValue($trim_o);
        }
        // query params
        if ($trim_r !== null) {
            $queryParams['trim_r'] = ObjectSerializer::toQueryValue($trim_r);
        }
        // query params
        if ($dom_active_range !== null) {
            $queryParams['dom_active_range'] = ObjectSerializer::toQueryValue($dom_active_range);
        }
        // query params
        if ($dom_180_range !== null) {
            $queryParams['dom_180_range'] = ObjectSerializer::toQueryValue($dom_180_range);
        }
        // query params
        if ($options !== null) {
            $queryParams['options'] = ObjectSerializer::toQueryValue($options);
        }
        // query params
        if ($features !== null) {
            $queryParams['features'] = ObjectSerializer::toQueryValue($features);
        }
        // query params
        if ($exclude_certified !== null) {
            $queryParams['exclude_certified'] = ObjectSerializer::toQueryValue($exclude_certified);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
