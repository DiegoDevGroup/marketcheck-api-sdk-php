<?php
/**
 * HistoryApiTest
 * PHP version 5
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketcheck Cars API
 *
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

require __DIR__.'/../../vendor/autoload.php';
require __DIR__.'/../../lib/Api/HistoryApi.php';

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

use \marketcheck\api\sdk\Configuration;
use \marketcheck\api\sdk\ApiException;
use \marketcheck\api\sdk\ObjectSerializer;

/**
 * HistoryApiTest Class Doc Comment
 *
 * @category Class
 * @package  marketcheck\api\sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryApiTest extends \PHPUnit_Framework_TestCase
{
    private $api_key = "Your api key";      
    private $vin = array("1FTEW1EF9GKE64460","NM0LS7E78G1263750","1FTNE1CM0FKA52494","1FADP3N21FL364871","1FTEW1EG1FFB24493"); 
    private $fields = null;
    private $rows = null; 
    private $page = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for history
     *
     * Get a cars online listing history.
     *
     */
    public function testHistory()
    {
        echo "\nShould validate history of vin";
        $apiInstance = new marketcheck\api\sdk\Api\HistoryApi(new GuzzleHttp\Client());
        foreach($this->vin as $h_vin) 
        {
            try 
            {
                $result = $apiInstance->history($h_vin, $this->api_key);  
                $last_seen_at_ary = []; 
                $temp = [];
                foreach($result as $listing)
                {
                    array_push($temp,$listing["last_seen_at_date"]);
                }
                $last_seen_at_ary  = $temp;
                sort($last_seen_at_ary);

                $this->assertNotEquals(sizeof($result), 0);
                $this->assertEquals($temp, array_reverse($last_seen_at_ary));
                $this->assertEquals(sizeof(array_unique($result)), sizeof($result));
                print_r("\n/history/$h_vin?api_key={{api_key}}: endpoint working fine");
            } catch (Exception $e) {
                $this->fail($e->getMessage());
                }
        }

        echo "\nValidate fields are returned when specified in fields param for multiple vins";       
        $this->fields = "seller_type,inventory_type,is_searchable,dealer_id,source,data_source"; 
        $this->rows = null; 
        $this->page = null;
        foreach($this->vin as $h_vin) {
            try 
            {
                $result = $apiInstance->history($h_vin, $this->api_key, $this->fields, $this->rows, $this->page);
                $this->assertNotEquals(sizeof($result), 0);
                 foreach($result as $listing)
                    {                    
                    $this->assertArrayHasKey("seller_type", $listing);
                    $this->assertArrayHasKey("inventory_type", $listing);
                    $this->assertArrayHasKey("is_searchable", $listing);
                    $this->assertArrayHasKey("dealer_id", $listing);
                    $this->assertArrayHasKey("source", $listing);
                    $this->assertArrayHasKey("data_source", $listing);
                    $this->assertArrayHasKey("status_date", $listing);
                    }                        
                print_r("\n/history/$h_vin?api_key={{api_key}}&fields=seller_type,inventory_type,is_searchable,dealer_id,source,data_source: endpoint working fine");
            } catch (Exception $e) {
                $this->fail($e->getMessage());
                }
        }
    }
}
